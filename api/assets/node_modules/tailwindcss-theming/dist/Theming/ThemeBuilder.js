"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Strategy_1 = require("./Strategy");
const getCssConfiguration_1 = require("./Generator/CSS/getCssConfiguration");
const getThemeConfiguration_1 = require("./Generator/getThemeConfiguration");
class ThemeBuilder {
    constructor() {
        this._handlerConfig = {};
        this._themes = [];
        this.defaults();
    }
    /**
     * Sets the default configuration.
     *
     * @returns self
     */
    defaults() {
        this._config = {
            prefix: undefined,
            colorVariablePrefix: 'color',
            strategy: Strategy_1.Strategy.Attribute,
            hexadecimal: false,
        };
        return this;
    }
    /**
     * Sets the `prefix` configuration option.
     * @param value Export prefix.
     *
     * @returns self
     */
    prefix(value) {
        this._config.prefix = value;
        return this;
    }
    /**
     * Sets the `colorVariablePrefix` configuration option.
     * @param value Variable prefix.
     *
     * @returns self
     */
    colorVariablePrefix(value) {
        this._config.colorVariablePrefix = value;
        return this;
    }
    /**
     * Sets the `strategy` configuration option.
     * @param value Stragegy.
     *
     * @returns self
     */
    strategy(value) {
        this._config.strategy = value;
        return this;
    }
    /**
     * Enables hexadecimal mode. Opacity variants are disabled.
     *
     * @returns {this}
     * @memberof ThemeBuilder
     */
    hexadecimal() {
        this._config.hexadecimal = true;
        return this;
    }
    /**
     * Use the `PrefixedClass` strategy.
     *
     * @param {string} [prefix] Prefix to be used.
     * @returns {this}
     * @memberof ThemeBuilder
     */
    asPrefixedClass(prefix) {
        this._config.strategy = Strategy_1.Strategy.PrefixedClass;
        this._config.prefix = prefix || this._config.prefix;
        return this;
    }
    /**
     * Use the `Class` strategy.
     *
     * @returns {this}
     * @memberof ThemeBuilder
     */
    asClass() {
        this._config.strategy = Strategy_1.Strategy.Class;
        return this;
    }
    /**
     * Use the `DataAttribute` strategy.
     *
     * @returns {this}
     * @memberof ThemeBuilder
     */
    asDataAttribute() {
        this._config.strategy = Strategy_1.Strategy.DataAttribute;
        return this;
    }
    /**
     * Use the `DataThemeAttribute` strategy.
     *
     * @returns {this}
     * @memberof ThemeBuilder
     */
    asDataThemeAttribute() {
        this._config.strategy = Strategy_1.Strategy.DataThemeAttribute;
        return this;
    }
    /**
     * Use the `PrefixedAttribute` strategy.
     *
     * @param {string} [prefix] Prefix to be used.
     * @returns {this}
     * @memberof ThemeBuilder
     */
    asPrefixedAttribute(prefix) {
        this._config.strategy = Strategy_1.Strategy.PrefixedAttribute;
        this._config.prefix = prefix || this._config.prefix;
        return this;
    }
    /**
     * Use the `Attribute` strategy. This is the default one.
     *
     * @returns {this}
     * @memberof ThemeBuilder
     */
    asAttribute() {
        this._config.strategy = Strategy_1.Strategy.Attribute;
        return this;
    }
    /**
     * Add a default theme.
     *
     * @param {Theme} theme
     * @returns {this}
     * @memberof ThemeBuilder
     */
    default(theme) {
        this._themes.push(theme.default());
        return this;
    }
    /**
     * Add a light theme, and se.
     *
     * @param {Theme} theme
     * @returns {this}
     * @memberof ThemeBuilder
     */
    light(theme, isDefault = true, isAssignable = true) {
        if (!theme.hasName()) {
            theme.name('light');
        }
        if (isDefault) {
            theme.default();
        }
        if (isAssignable) {
            theme.assignable();
        }
        this._themes.push(theme.light());
        return this;
    }
    /**
     * Add a dark theme, and se.
     *
     * @param {Theme} theme
     * @returns {this}
     * @memberof ThemeBuilder
     */
    dark(theme, isDefault = true, isAssignable = true) {
        if (!theme.hasName()) {
            theme.name('dark');
        }
        if (isDefault) {
            theme.default();
        }
        if (isAssignable) {
            theme.assignable();
        }
        this._themes.push(theme.dark());
        return this;
    }
    /**
     * Add a theme.
     *
     * @param {Theme} theme
     * @returns {this}
     * @memberof ThemeBuilder
     */
    theme(theme) {
        this._themes.push(theme);
        return this;
    }
    /**
     * Add themes.
     *
     * @param {Theme[]} themes
     * @returns {this}
     * @memberof ThemeBuilder
     */
    themes(themes) {
        this._themes.push(...themes);
        return this;
    }
    /**
     * Gets the theming configuration.
     *
     * @returns {Configuration}
     * @memberof ThemeBuilder
     */
    get theming() {
        return this._config;
    }
    /**
     * Gets the Tailwind configuration.
     *
     * @readonly
     * @type {*}
     * @memberof ThemeBuilder
     */
    get config() {
        return {
            theme: getThemeConfiguration_1.getThemeConfiguration(this._themes, this._config),
        };
    }
    /**
     * Gets the Tailwind handler method.
     *
     * @readonly
     * @type {TailwindPluginHandler}
     * @memberof ThemeBuilder
     */
    get handler() {
        return ({ addBase }) => {
            addBase(getCssConfiguration_1.getCssConfiguration(this._themes, this._config), this._handlerConfig);
        };
    }
    /**
     * Gets the whole plugin.
     *
     * @returns {TailwindPlugin}
     * @memberof ThemeBuilder
     */
    plugin(config = {}) {
        this._handlerConfig = config || {};
        return {
            config: this.config,
            handler: this.handler,
        };
    }
}
exports.ThemeBuilder = ThemeBuilder;
