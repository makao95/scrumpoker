"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../Generator/utils");
class CustomProperty {
    constructor(name, value, extend, prefix, parse = true) {
        this.name(name);
        this.value(value);
        this.extend(extend);
        this.prefix(prefix);
        this.parse(parse);
    }
    /**
     * Sets the name of this .
     *
     * @param {string} name
     * @returns {this}
     * @memberof CustomProperty
     */
    name(name) {
        this._name = name;
        return this;
    }
    /**
     * Sets the value of this custom property.
     *
     * @param {CustomPropertyValueType} value
     * @returns {this}
     * @memberof CustomProperty
     */
    value(value) {
        this._value = value;
        return this;
    }
    /**
     * Will parse the value and export it to a string.
     *
     * @param {boolean} value
     * @returns {this}
     * @memberof CustomProperty
     */
    parse(value) {
        this._parse = value;
        return this;
    }
    /**
     * Extends Tailwind's configuration at the given path.
     *
     * @param {string} [path]
     * @returns {this}
     * @memberof CustomProperty
     */
    extend(path) {
        this._path = path;
        return this;
    }
    /**
     * Sets a prefix to the variable.
     *
     * @param {string|false} [prefix]
     * @returns {this}
     * @memberof CustomProperty
     */
    prefix(prefix) {
        this._prefix = prefix;
        return this;
    }
    /**
     * This custom property is extending the configuration.
     *
     * @returns {boolean}
     * @memberof CustomProperty
     */
    extends() {
        return !!this._path;
    }
    /**
     * Gets a computed version of the custom property value.
     *
     * @readonly
     * @type {string}
     * @memberof CustomProperty
     */
    get computed() {
        if (this._parse || ['string', 'number'].includes(typeof this._value)) {
            return this._value.toString();
        }
        return this._value.join(',');
    }
    /**
     * Gets the path to which this custom property will extend.
     *
     * @readonly
     * @type {string}
     * @memberof CustomProperty
     */
    getPath() {
        if (this._path) {
            let name = utils_1.getPascalCase(this._name);
            return `${this._path}.${name}`;
        }
        return '';
    }
    /**
     * Gets the prefix for this property.
     *
     * @readonly
     * @type {string}
     * @memberof CustomProperty
     */
    getPrefix(withDash = true) {
        if (false === this._prefix) {
            return '';
        }
        let prefix = this._prefix || this._path;
        return prefix ? `${utils_1.getPascalCase(prefix)}${withDash ? '-' : ''}` : '';
    }
    /**
     * Gets the name of this custom property.
     *
     * @returns {string}
     * @memberof CustomProperty
     */
    getName() {
        return this._name;
    }
    /**
     * Gets the value of this custom property.
     *
     * @returns {CustomPropertyValueType}
     * @memberof CustomProperty
     */
    getValue() {
        return this._value;
    }
}
exports.CustomProperty = CustomProperty;
