import { ThemeScheme } from './ThemeScheme';
import { Color } from '../Color/Color';
import { Colors } from '../Parser/Color/Colors';
import { Variant } from '../Variant/Variant';
import { CustomProperty, CustomPropertyValueType } from '../CustomProperty/CustomProperty';
export declare const DEFAULT_THEME_NAME = "default";
export declare class Theme {
    private _name?;
    private _scheme?;
    private _colors;
    private _customProperties;
    private _variants;
    private _assignable;
    private _default;
    constructor();
    /**
     * Sets this theme the default theme.
     *
     * @returns {this}
     * @memberof Theme
     */
    default(): this;
    /**
     * Defines if this theme must be assignable by strategy.
     *
     * @returns {this}
     * @memberof Theme
     */
    assignable(): this;
    /**
     * Sets the name of this theme.
     *
     * @param {string} [name]
     * @returns {(this | string)}
     * @memberof Theme
     */
    name(name: string): this;
    /**
     * Defines this theme as a light theme.
     *
     * @returns {this}
     * @memberof Theme
     */
    light(): this;
    /**
     * Defines this theme as a dark theme.
     *
     * @returns {this}
     * @memberof Theme
     */
    dark(): this;
    /**
     * Sets a variable on this theme.
     *
     * @param {string} name
     * @param {CustomPropertyValueType} value
     * @param {string} [extend]
     * @param {string|false} [prefix]
     * @param {boolean} [parse=true]
     * @returns {this}
     * @memberof Theme
     */
    customProperty(name: string, value: CustomPropertyValueType, extend?: string, prefix?: string | false, parse?: boolean): this;
    /**
     * Sets a variable on this theme.
     *
     * @param {string} name
     * @param {CustomPropertyValueType} value
     * @param {string} [extend]
     * @param {string|false} [prefix]
     * @param {boolean} [parse=true]
     * @returns {this}
     * @memberof Theme
     */
    variable(name: string, value: CustomPropertyValueType, extend?: string, prefix?: string | false, parse?: boolean): this;
    /**
     * Sets a color on this theme.
     *
     * @param {string} name
     * @param {string} value
     * @returns {this}
     * @memberof Theme
     */
    color(name: string, value: string): this;
    /**
     * Sets the colors of this theme.
     *
     * @param {(Colors | Color[])} colors
     * @returns {(this | string)}
     * @memberof Theme
     */
    colors(colors: Colors | Color[]): this;
    /**
     * Adds an opacity variant.
     *
     * @param {string} name Name of the variant.
     * @param {number} value Value of the variant.
     * @param {string[]} [colors] The color keys to be associated to. If empty, this will be a general variant.
     * @returns {this}
     * @memberof Theme
     */
    opacityVariant(name: string, value: number, colors?: string[] | string): this;
    /**
     * Adds a color variant.
     *
     * @param {string} name Name of the variant.
     * @param {number} value Value of the variant.
     * @param {string[]} [colors] The color keys to be associated to. If empty, this will be a general variant.
     * @returns {this}
     * @memberof Theme
     */
    colorVariant(name: string, value: string, colors?: string[] | string): this;
    /**
     * Checks if a variant exists on this theme.
     *
     * @param {string} name Variant name.
     * @param {boolean} [throws=false] Throws an error if the variant exists.
     * @throws If `throws` is set to `true` and the variant exists.
     * @returns {boolean}
     * @memberof Theme
     */
    hasVariant(name: string, throws?: boolean): boolean;
    /**
     * Checks if a variant exists for a color on this theme.
     *
     * @param {string} name Variant name.
     * @param {(string[] | string)} [colors] Colors.
     * @param {boolean} [throws=false] Throws an exception.
     * @returns {boolean}
     * @memberof Theme
     */
    checkVariantUniqueness(name: string, colors?: string[] | string, throws?: boolean): boolean;
    /**
     * Gets the variants of the given color.
     *
     * @param {string} color
     * @returns {Variant[]}
     * @memberof Theme
     */
    variantsOf(color: string): Variant[];
    /**
     * Checks if this theme is set as the default theme.
     *
     * @returns {boolean}
     * @memberof Theme
     */
    isDefault(): boolean;
    /**
     * Returns this theme's name.
     *
     * @returns {string}
     * @memberof Theme
     */
    getName(): string | null;
    /**
     * Returns this theme's colors.
     *
     * @returns {Color[]}
     * @memberof Theme
     */
    getColors(): Color[];
    /**
     * Return this theme's custom properties.
     *
     * @returns {CustomProperty[]}
     * @memberof Theme
     */
    getCustomProperties(): CustomProperty[];
    /**
     * Gets this theme's scheme.
     *
     * @returns {ThemeScheme}
     * @memberof Theme
     */
    getScheme(): ThemeScheme | null;
    /**
     * Gets if this theme has a defined name.
     *
     * @readonly
     * @type {boolean}
     * @memberof Theme
     */
    hasName(): boolean;
    /**
     * Gets if this theme must be assignable by strategy.
     *
     * @readonly
     * @type {boolean}
     * @memberof Theme
     */
    isAssignable(): boolean;
    /**
     * Checks if this theme has a color scheme.
     *
     * @readonly
     * @type {boolean}
     * @memberof Theme
     */
    hasScheme(): boolean;
}
