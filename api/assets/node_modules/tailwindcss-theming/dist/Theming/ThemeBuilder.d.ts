import { Theme } from './Theme/Theme';
import { Configuration } from './Configuration';
import { Strategy } from './Strategy';
import { TailwindPlugin } from '../TailwindPlugin/TailwindPlugin';
import { TailwindPluginHandler } from '../TailwindPlugin/TailwindPluginHandler';
export declare class ThemeBuilder {
    private _themes;
    private _config;
    private _handlerConfig;
    constructor();
    /**
     * Sets the default configuration.
     *
     * @returns self
     */
    defaults(): this;
    /**
     * Sets the `prefix` configuration option.
     * @param value Export prefix.
     *
     * @returns self
     */
    prefix(value: string | undefined): this;
    /**
     * Sets the `colorVariablePrefix` configuration option.
     * @param value Variable prefix.
     *
     * @returns self
     */
    colorVariablePrefix(value?: string): this;
    /**
     * Sets the `strategy` configuration option.
     * @param value Stragegy.
     *
     * @returns self
     */
    strategy(value: Strategy): this;
    /**
     * Enables hexadecimal mode. Opacity variants are disabled.
     *
     * @returns {this}
     * @memberof ThemeBuilder
     */
    hexadecimal(): this;
    /**
     * Use the `PrefixedClass` strategy.
     *
     * @param {string} [prefix] Prefix to be used.
     * @returns {this}
     * @memberof ThemeBuilder
     */
    asPrefixedClass(prefix?: string): this;
    /**
     * Use the `Class` strategy.
     *
     * @returns {this}
     * @memberof ThemeBuilder
     */
    asClass(): this;
    /**
     * Use the `DataAttribute` strategy.
     *
     * @returns {this}
     * @memberof ThemeBuilder
     */
    asDataAttribute(): this;
    /**
     * Use the `DataThemeAttribute` strategy.
     *
     * @returns {this}
     * @memberof ThemeBuilder
     */
    asDataThemeAttribute(): this;
    /**
     * Use the `PrefixedAttribute` strategy.
     *
     * @param {string} [prefix] Prefix to be used.
     * @returns {this}
     * @memberof ThemeBuilder
     */
    asPrefixedAttribute(prefix?: string): this;
    /**
     * Use the `Attribute` strategy. This is the default one.
     *
     * @returns {this}
     * @memberof ThemeBuilder
     */
    asAttribute(): this;
    /**
     * Add a default theme.
     *
     * @param {Theme} theme
     * @returns {this}
     * @memberof ThemeBuilder
     */
    default(theme: Theme): this;
    /**
     * Add a light theme, and se.
     *
     * @param {Theme} theme
     * @returns {this}
     * @memberof ThemeBuilder
     */
    light(theme: Theme, isDefault?: boolean, isAssignable?: boolean): this;
    /**
     * Add a dark theme, and se.
     *
     * @param {Theme} theme
     * @returns {this}
     * @memberof ThemeBuilder
     */
    dark(theme: Theme, isDefault?: boolean, isAssignable?: boolean): this;
    /**
     * Add a theme.
     *
     * @param {Theme} theme
     * @returns {this}
     * @memberof ThemeBuilder
     */
    theme(theme: Theme): this;
    /**
     * Add themes.
     *
     * @param {Theme[]} themes
     * @returns {this}
     * @memberof ThemeBuilder
     */
    themes(themes: Theme[]): this;
    /**
     * Gets the theming configuration.
     *
     * @returns {Configuration}
     * @memberof ThemeBuilder
     */
    get theming(): Configuration;
    /**
     * Gets the Tailwind configuration.
     *
     * @readonly
     * @type {*}
     * @memberof ThemeBuilder
     */
    get config(): any;
    /**
     * Gets the Tailwind handler method.
     *
     * @readonly
     * @type {TailwindPluginHandler}
     * @memberof ThemeBuilder
     */
    get handler(): TailwindPluginHandler;
    /**
     * Gets the whole plugin.
     *
     * @returns {TailwindPlugin}
     * @memberof ThemeBuilder
     */
    plugin(config?: any): TailwindPlugin;
}
