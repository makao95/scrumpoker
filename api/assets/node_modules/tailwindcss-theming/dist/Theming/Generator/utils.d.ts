import { Color } from '../Color/Color';
import { Theme } from '../Theme/Theme';
import { Configuration } from '../Configuration';
import { ColorVariant } from '../Variant/ColorVariant';
import { OpacityVariant } from '../Variant/OpacityVariant';
import { CustomProperty } from '../CustomProperty/CustomProperty';
import { Variant } from '../Variant/Variant';
/**
 * Get the default theme out of an array of themes.
 *
 * @export
 * @param {Theme[]} themes
 * @returns {Theme}
 */
export declare function getDefaultTheme(themes: Theme[]): Theme;
/**
 * Get the name of the CSS variable for given color.
 *
 * @export
 * @param {Color} color
 * @param {Configuration} config
 * @returns {string}
 */
export declare function getColorVariableName(color: Color, config: Configuration): string;
/**
 * Get the name of the CSS variable for a color variant.
 *
 * @export
 * @param {ColorVariant} variant
 * @param {Configuration} config
 * @returns {string}
 */
export declare function getColorVariantVariableName(variant: ColorVariant): string;
/**
 * Get a string with the variant scope.
 *
 * @param variant
 */
export declare function getFormattedVariantScope(variant: Variant): string;
/**
 * Get the name of the variant's target or null.
 *
 * @param variant
 */
export declare function getVariantScope(variant: Variant): string | null;
/**
 * Get the name of the CSS variable for an opacity variant.
 *
 * @export
 * @param {ColorVariant} variant
 * @param {Configuration} config
 * @returns {string}
 */
export declare function getOpacityVariantVariableName(variant: OpacityVariant): string;
/**
 * Get the name of the CSS custom property.
 *
 * @export
 * @param {CustomProperty} property
 * @returns {string}
 */
export declare function getCustomPropertyVariableName(property: CustomProperty): string;
/**
 * Gets the CSS value for a color variant.
 *
 * @export
 * @param {ColorVariant} variant
 * @param {Configuration} config
 * @returns {string}
 */
export declare function getColorVariantCssConfiguration(variant: ColorVariant, config: Configuration): string;
/**
 * Gets the CSS variable value for a color variant.
 *
 * @export
 * @param {ColorVariant} variant
 * @returns {string}
 */
export declare function getColorVariantCssVariableValue(variant: ColorVariant, config: Configuration): string;
/**
 * Gets the CSS value for an opacity variant.
 *
 * @export
 * @param {Color} color
 * @param {OpacityVariant} variant
 * @param {Configuration} config
 * @returns {string}
 */
export declare function getOpacityVariantCssConfiguration(color: Color, variant: OpacityVariant, config: Configuration): string;
/**
 * Gets the CSS value for a color.
 *
 * @export
 * @param {Color} color
 * @param {Configuration} config
 * @returns {string}
 */
export declare function getColorCssConfiguration(color: Color, config: Configuration): string;
/**
 * Gets the CSS variable value for a color.
 *
 * @export
 * @param {Color} color
 * @returns {string}
 */
export declare function getColorCssVariableValue(color: Color, config: Configuration): string;
/**
 * Gets the pascal case version of the string.
 *
 * @export
 * @param {string} str
 * @returns {string}
 */
export declare function getPascalCase(str: string): string;
